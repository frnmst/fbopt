#!/usr/bin/env bash
#
# fbopt version 0.4.4
#
# Written in 2018 by Franco Masotti/frnmst <franco.masotti@live.com>
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the public 
# domain worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. If not, see 
# <http://creativecommons.org/publicdomain/zero/1.0/>. 
#
#
# See also https://frnmst.gitlab.io/notes/my-bash-option-parsing-template.html
#

set -euo pipefail

show_help()
{
    cat <<-EOF
Usage: <program_name> [OPTION] ARGUMENTA ARGUMENTB
<Description>

Mandatory arguments to long options are mandatory for short options too.
Options:
    -a, --flag-a=FLAGA          set a
    -b, --flag-b=FLAGB          set b
    -c                          enable c
    -d                          enable d
    -e, --flag-e=FLAGE          set e
    -f[=FLAGF]                  enable and or set f
                                with an optional argument
    -h, --help                  print this help
    --print-flags               print the enabled options. This can also
                                be used to print the default options
    --version                   print software version

Exit status:
 0  if OK,
 1  if an error occurred.

<License header>
<Copyright>
EOF
}

# A function that prints the variable name and value of all
# the flags enabled by the user. This is useful to check that
# all the flags are correct, as kind of a dry run.
show_flags()
{
    local flags="${*}"

    for flag in ${flags}; do
            printf "%s='%s'\n" "${flag}" "${!flag}"
    done
}

show_version()
{
    local program_name="${1}"
    local version="${2}"

    printf "%s\n" ""${program_name}" "${version}""
}

getopt_error()
{
    local program_name="${0}"

    printf "%s\n" "Try '"${program_name}" --help' for more information"
} 1>&2 2>&-

main()
{
    # Create a new array from the reference of the input one.
    # See https://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
    # See some comments below.
    set +u
    declare -a argc=("${!1}")
    set -u

    # Set the options. flag_f has an optional argument.
    local getopt_short_options='a:b:c:def::hi'
    local getopt_long_options='flag-a:,flag-b:,flag-e,print-flags,help,version'

    # Set the default values for the static flags.
    local help='false'
    local print_flags='false'
    local version='false'
    # Remember to set the following variables accordingly and to update the
    # version number.
    local program_version='0.0.1'
    local program_name_simplified='myprogram'

    # Set the default values for the flags.
    local flag_a=''
    local flag_b=''
    local flag_c=''
    local flag_d='false'
    local flag_e='false'
    local flag_f='false'

    local program_name="${0}"
    opts="$(getopt \
        --name "${program_name}" \
        --shell bash \
        --options "${getopt_short_options}" \
        --longoptions "${getopt_long_options}" \
        -- \
        "${argc[@]}")"
    getopt_retval=${?}
    # Check that getopt works and that some kind of argument
    # is passed to the script. This is "quotation hell".
    a="'"${argc[@]}"'"
    { [ ${getopt_retval} -ne 0 ] || [ -z "${a}" ]; } && getopt_error && return 1
    eval set -- "${opts}"

    # Option parsing.
    while [ "${1}" != '--' ]; do
        case "${1}" in

            -a | --flag-a )     flag_a="${2}";
                                shift 1 ;;

            --flag-b )          flag_b="${2}";
                                shift 1 ;;

            -c )                flag_c="${2}";
                                shift 1 ;;

            -d )                flag_d='true' ;;

            -e | --flag-e )     flag_e='true' ;;

            -f )                flag_f="${2}";
                                shift 1 ;;

            -h | --help )       help='true' ;;

            --print-flags )     print_flags='true' ;;

            --version )         version='true' ;;

        esac
        # Iterate through all arguments.
        shift 1
    done

    shift 1
    # Everything else after '--' is an argument.
    argc="${*}"
    # Arguments must be placed here as local variables.
    set +u
    local arg_a="${1}"
    local arg_b="${2}"
    set -u

    [ "${help}" = 'true' ] && show_help && return 0
    [ "${version}" = 'true' ] \
        && show_version "${program_name_simplified}" "${program_version}" \
        && return 0
    # Check that the flags or arguments that must be non empty are actually not
    # empty.
    # A user might infact circumvent getopt's mechanisms like this
    # ./program -flag ''
    # This can also be done inside the option parser loop but to avoid nestings
    # I prefer it done here.
    { [ -z "${arg_a}" ] \
        || [ -z "${arg_b}" ] \
        || [ -z "${flag_a}" ] \
        || [ -z "${flag_b}" ]; } \
        && getopt_error && return 1
    [ "${print_flags}" = 'true' ] \
        && show_flags \
            'flag_a' \
            'flag_b' \
            'flag_c' \
            'flag_d' \
            'flag_e' \
            'flag_f' \
        && return 0
    # Override values of optional parameters.
    [ -z "${flag_f}" ] && flag_f='true'

    # From now on you should call a function or an external program
    # using the values of the flag variables.
    [ "${flag_a}" = 'alpha' ] && do_something_alpha "${arg_a}" && return ${?}
    [ "${flag_a}" = 'a' ] && do_something_a "${arg_a}" "${arg_b}" && return ${?}
}

# Test dependencies and versions.
# getopt must return 4 to be fully compatible. See getopt's manual.
set +e
command -V bash getopt 1>/dev/null 2>/dev/null && { getopt -T; [ ${?} -eq 4 ]; }
set -e

# Get and pass argc to the main function.
# All this work with an array must be done to preserve
# quotations for arguments that have whitespaces.
# See https://lists.debian.org/debian-user/2007/12/msg01244.html
# See also https://mywiki.wooledge.org/BashFAQ/112#Negatives
# for the empty array is unset problem.
opts=('')
for opt in "${@}"; do
    opts=("${opts[@]}" "${opt}")
done

if [ -z "${opts[0]}" ] && [ ${#opts[@]} -gt 1 ]; then
        # Shift one element left in the opts array.
        i=0
        while [ ${i} -lt $((${#opts[@]}-1)) ]; do
                opts[${i}]=${opts[$((${i}+1))]}
                i=$((${i}+1))
        done
        unset i
fi

main 'opts[@]'
